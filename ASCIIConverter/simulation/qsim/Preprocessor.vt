// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2019 17:18:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Preprocessor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Preprocessor_vlg_sample_tst(
	clk,
	ready,
	reset,
	sampler_tx
);
input  clk;
input  ready;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ready or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Preprocessor_vlg_check_tst (
	messsageLenVecotr,
	sampler_rx
);
input [0:63] messsageLenVecotr;
input sampler_rx;

reg [0:63] messsageLenVecotr_expected;

reg [0:63] messsageLenVecotr_prev;

reg [0:63] messsageLenVecotr_expected_prev;

reg [0:63] last_messsageLenVecotr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	messsageLenVecotr_prev = messsageLenVecotr;
end

// update expected /o prevs

always @(trigger)
begin
	messsageLenVecotr_expected_prev = messsageLenVecotr_expected;
end


// expected messsageLenVecotr[ 63 ]
initial
begin
	messsageLenVecotr_expected[63] = 1'bX;
end 
// expected messsageLenVecotr[ 62 ]
initial
begin
	messsageLenVecotr_expected[62] = 1'bX;
end 
// expected messsageLenVecotr[ 61 ]
initial
begin
	messsageLenVecotr_expected[61] = 1'bX;
end 
// expected messsageLenVecotr[ 60 ]
initial
begin
	messsageLenVecotr_expected[60] = 1'bX;
end 
// expected messsageLenVecotr[ 59 ]
initial
begin
	messsageLenVecotr_expected[59] = 1'bX;
end 
// expected messsageLenVecotr[ 58 ]
initial
begin
	messsageLenVecotr_expected[58] = 1'bX;
end 
// expected messsageLenVecotr[ 57 ]
initial
begin
	messsageLenVecotr_expected[57] = 1'bX;
end 
// expected messsageLenVecotr[ 56 ]
initial
begin
	messsageLenVecotr_expected[56] = 1'bX;
end 
// expected messsageLenVecotr[ 55 ]
initial
begin
	messsageLenVecotr_expected[55] = 1'bX;
end 
// expected messsageLenVecotr[ 54 ]
initial
begin
	messsageLenVecotr_expected[54] = 1'bX;
end 
// expected messsageLenVecotr[ 53 ]
initial
begin
	messsageLenVecotr_expected[53] = 1'bX;
end 
// expected messsageLenVecotr[ 52 ]
initial
begin
	messsageLenVecotr_expected[52] = 1'bX;
end 
// expected messsageLenVecotr[ 51 ]
initial
begin
	messsageLenVecotr_expected[51] = 1'bX;
end 
// expected messsageLenVecotr[ 50 ]
initial
begin
	messsageLenVecotr_expected[50] = 1'bX;
end 
// expected messsageLenVecotr[ 49 ]
initial
begin
	messsageLenVecotr_expected[49] = 1'bX;
end 
// expected messsageLenVecotr[ 48 ]
initial
begin
	messsageLenVecotr_expected[48] = 1'bX;
end 
// expected messsageLenVecotr[ 47 ]
initial
begin
	messsageLenVecotr_expected[47] = 1'bX;
end 
// expected messsageLenVecotr[ 46 ]
initial
begin
	messsageLenVecotr_expected[46] = 1'bX;
end 
// expected messsageLenVecotr[ 45 ]
initial
begin
	messsageLenVecotr_expected[45] = 1'bX;
end 
// expected messsageLenVecotr[ 44 ]
initial
begin
	messsageLenVecotr_expected[44] = 1'bX;
end 
// expected messsageLenVecotr[ 43 ]
initial
begin
	messsageLenVecotr_expected[43] = 1'bX;
end 
// expected messsageLenVecotr[ 42 ]
initial
begin
	messsageLenVecotr_expected[42] = 1'bX;
end 
// expected messsageLenVecotr[ 41 ]
initial
begin
	messsageLenVecotr_expected[41] = 1'bX;
end 
// expected messsageLenVecotr[ 40 ]
initial
begin
	messsageLenVecotr_expected[40] = 1'bX;
end 
// expected messsageLenVecotr[ 39 ]
initial
begin
	messsageLenVecotr_expected[39] = 1'bX;
end 
// expected messsageLenVecotr[ 38 ]
initial
begin
	messsageLenVecotr_expected[38] = 1'bX;
end 
// expected messsageLenVecotr[ 37 ]
initial
begin
	messsageLenVecotr_expected[37] = 1'bX;
end 
// expected messsageLenVecotr[ 36 ]
initial
begin
	messsageLenVecotr_expected[36] = 1'bX;
end 
// expected messsageLenVecotr[ 35 ]
initial
begin
	messsageLenVecotr_expected[35] = 1'bX;
end 
// expected messsageLenVecotr[ 34 ]
initial
begin
	messsageLenVecotr_expected[34] = 1'bX;
end 
// expected messsageLenVecotr[ 33 ]
initial
begin
	messsageLenVecotr_expected[33] = 1'bX;
end 
// expected messsageLenVecotr[ 32 ]
initial
begin
	messsageLenVecotr_expected[32] = 1'bX;
end 
// expected messsageLenVecotr[ 31 ]
initial
begin
	messsageLenVecotr_expected[31] = 1'bX;
end 
// expected messsageLenVecotr[ 30 ]
initial
begin
	messsageLenVecotr_expected[30] = 1'bX;
end 
// expected messsageLenVecotr[ 29 ]
initial
begin
	messsageLenVecotr_expected[29] = 1'bX;
end 
// expected messsageLenVecotr[ 28 ]
initial
begin
	messsageLenVecotr_expected[28] = 1'bX;
end 
// expected messsageLenVecotr[ 27 ]
initial
begin
	messsageLenVecotr_expected[27] = 1'bX;
end 
// expected messsageLenVecotr[ 26 ]
initial
begin
	messsageLenVecotr_expected[26] = 1'bX;
end 
// expected messsageLenVecotr[ 25 ]
initial
begin
	messsageLenVecotr_expected[25] = 1'bX;
end 
// expected messsageLenVecotr[ 24 ]
initial
begin
	messsageLenVecotr_expected[24] = 1'bX;
end 
// expected messsageLenVecotr[ 23 ]
initial
begin
	messsageLenVecotr_expected[23] = 1'bX;
end 
// expected messsageLenVecotr[ 22 ]
initial
begin
	messsageLenVecotr_expected[22] = 1'bX;
end 
// expected messsageLenVecotr[ 21 ]
initial
begin
	messsageLenVecotr_expected[21] = 1'bX;
end 
// expected messsageLenVecotr[ 20 ]
initial
begin
	messsageLenVecotr_expected[20] = 1'bX;
end 
// expected messsageLenVecotr[ 19 ]
initial
begin
	messsageLenVecotr_expected[19] = 1'bX;
end 
// expected messsageLenVecotr[ 18 ]
initial
begin
	messsageLenVecotr_expected[18] = 1'bX;
end 
// expected messsageLenVecotr[ 17 ]
initial
begin
	messsageLenVecotr_expected[17] = 1'bX;
end 
// expected messsageLenVecotr[ 16 ]
initial
begin
	messsageLenVecotr_expected[16] = 1'bX;
end 
// expected messsageLenVecotr[ 15 ]
initial
begin
	messsageLenVecotr_expected[15] = 1'bX;
end 
// expected messsageLenVecotr[ 14 ]
initial
begin
	messsageLenVecotr_expected[14] = 1'bX;
end 
// expected messsageLenVecotr[ 13 ]
initial
begin
	messsageLenVecotr_expected[13] = 1'bX;
end 
// expected messsageLenVecotr[ 12 ]
initial
begin
	messsageLenVecotr_expected[12] = 1'bX;
end 
// expected messsageLenVecotr[ 11 ]
initial
begin
	messsageLenVecotr_expected[11] = 1'bX;
end 
// expected messsageLenVecotr[ 10 ]
initial
begin
	messsageLenVecotr_expected[10] = 1'bX;
end 
// expected messsageLenVecotr[ 9 ]
initial
begin
	messsageLenVecotr_expected[9] = 1'bX;
end 
// expected messsageLenVecotr[ 8 ]
initial
begin
	messsageLenVecotr_expected[8] = 1'bX;
end 
// expected messsageLenVecotr[ 7 ]
initial
begin
	messsageLenVecotr_expected[7] = 1'bX;
end 
// expected messsageLenVecotr[ 6 ]
initial
begin
	messsageLenVecotr_expected[6] = 1'bX;
end 
// expected messsageLenVecotr[ 5 ]
initial
begin
	messsageLenVecotr_expected[5] = 1'bX;
end 
// expected messsageLenVecotr[ 4 ]
initial
begin
	messsageLenVecotr_expected[4] = 1'bX;
end 
// expected messsageLenVecotr[ 3 ]
initial
begin
	messsageLenVecotr_expected[3] = 1'bX;
end 
// expected messsageLenVecotr[ 2 ]
initial
begin
	messsageLenVecotr_expected[2] = 1'bX;
end 
// expected messsageLenVecotr[ 1 ]
initial
begin
	messsageLenVecotr_expected[1] = 1'bX;
end 
// expected messsageLenVecotr[ 0 ]
initial
begin
	messsageLenVecotr_expected[0] = 1'bX;
end 
// generate trigger
always @(messsageLenVecotr_expected or messsageLenVecotr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected messsageLenVecotr = %b | ",messsageLenVecotr_expected_prev);
	$display("| real messsageLenVecotr = %b | ",messsageLenVecotr_prev);
`endif
	if (
		( messsageLenVecotr_expected_prev[0] !== 1'bx ) && ( messsageLenVecotr_prev[0] !== messsageLenVecotr_expected_prev[0] )
		&& ((messsageLenVecotr_expected_prev[0] !== last_messsageLenVecotr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[0] = messsageLenVecotr_expected_prev[0];
	end
	if (
		( messsageLenVecotr_expected_prev[1] !== 1'bx ) && ( messsageLenVecotr_prev[1] !== messsageLenVecotr_expected_prev[1] )
		&& ((messsageLenVecotr_expected_prev[1] !== last_messsageLenVecotr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[1] = messsageLenVecotr_expected_prev[1];
	end
	if (
		( messsageLenVecotr_expected_prev[2] !== 1'bx ) && ( messsageLenVecotr_prev[2] !== messsageLenVecotr_expected_prev[2] )
		&& ((messsageLenVecotr_expected_prev[2] !== last_messsageLenVecotr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[2] = messsageLenVecotr_expected_prev[2];
	end
	if (
		( messsageLenVecotr_expected_prev[3] !== 1'bx ) && ( messsageLenVecotr_prev[3] !== messsageLenVecotr_expected_prev[3] )
		&& ((messsageLenVecotr_expected_prev[3] !== last_messsageLenVecotr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[3] = messsageLenVecotr_expected_prev[3];
	end
	if (
		( messsageLenVecotr_expected_prev[4] !== 1'bx ) && ( messsageLenVecotr_prev[4] !== messsageLenVecotr_expected_prev[4] )
		&& ((messsageLenVecotr_expected_prev[4] !== last_messsageLenVecotr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[4] = messsageLenVecotr_expected_prev[4];
	end
	if (
		( messsageLenVecotr_expected_prev[5] !== 1'bx ) && ( messsageLenVecotr_prev[5] !== messsageLenVecotr_expected_prev[5] )
		&& ((messsageLenVecotr_expected_prev[5] !== last_messsageLenVecotr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[5] = messsageLenVecotr_expected_prev[5];
	end
	if (
		( messsageLenVecotr_expected_prev[6] !== 1'bx ) && ( messsageLenVecotr_prev[6] !== messsageLenVecotr_expected_prev[6] )
		&& ((messsageLenVecotr_expected_prev[6] !== last_messsageLenVecotr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[6] = messsageLenVecotr_expected_prev[6];
	end
	if (
		( messsageLenVecotr_expected_prev[7] !== 1'bx ) && ( messsageLenVecotr_prev[7] !== messsageLenVecotr_expected_prev[7] )
		&& ((messsageLenVecotr_expected_prev[7] !== last_messsageLenVecotr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[7] = messsageLenVecotr_expected_prev[7];
	end
	if (
		( messsageLenVecotr_expected_prev[8] !== 1'bx ) && ( messsageLenVecotr_prev[8] !== messsageLenVecotr_expected_prev[8] )
		&& ((messsageLenVecotr_expected_prev[8] !== last_messsageLenVecotr_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[8] = messsageLenVecotr_expected_prev[8];
	end
	if (
		( messsageLenVecotr_expected_prev[9] !== 1'bx ) && ( messsageLenVecotr_prev[9] !== messsageLenVecotr_expected_prev[9] )
		&& ((messsageLenVecotr_expected_prev[9] !== last_messsageLenVecotr_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[9] = messsageLenVecotr_expected_prev[9];
	end
	if (
		( messsageLenVecotr_expected_prev[10] !== 1'bx ) && ( messsageLenVecotr_prev[10] !== messsageLenVecotr_expected_prev[10] )
		&& ((messsageLenVecotr_expected_prev[10] !== last_messsageLenVecotr_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[10] = messsageLenVecotr_expected_prev[10];
	end
	if (
		( messsageLenVecotr_expected_prev[11] !== 1'bx ) && ( messsageLenVecotr_prev[11] !== messsageLenVecotr_expected_prev[11] )
		&& ((messsageLenVecotr_expected_prev[11] !== last_messsageLenVecotr_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[11] = messsageLenVecotr_expected_prev[11];
	end
	if (
		( messsageLenVecotr_expected_prev[12] !== 1'bx ) && ( messsageLenVecotr_prev[12] !== messsageLenVecotr_expected_prev[12] )
		&& ((messsageLenVecotr_expected_prev[12] !== last_messsageLenVecotr_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[12] = messsageLenVecotr_expected_prev[12];
	end
	if (
		( messsageLenVecotr_expected_prev[13] !== 1'bx ) && ( messsageLenVecotr_prev[13] !== messsageLenVecotr_expected_prev[13] )
		&& ((messsageLenVecotr_expected_prev[13] !== last_messsageLenVecotr_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[13] = messsageLenVecotr_expected_prev[13];
	end
	if (
		( messsageLenVecotr_expected_prev[14] !== 1'bx ) && ( messsageLenVecotr_prev[14] !== messsageLenVecotr_expected_prev[14] )
		&& ((messsageLenVecotr_expected_prev[14] !== last_messsageLenVecotr_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[14] = messsageLenVecotr_expected_prev[14];
	end
	if (
		( messsageLenVecotr_expected_prev[15] !== 1'bx ) && ( messsageLenVecotr_prev[15] !== messsageLenVecotr_expected_prev[15] )
		&& ((messsageLenVecotr_expected_prev[15] !== last_messsageLenVecotr_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[15] = messsageLenVecotr_expected_prev[15];
	end
	if (
		( messsageLenVecotr_expected_prev[16] !== 1'bx ) && ( messsageLenVecotr_prev[16] !== messsageLenVecotr_expected_prev[16] )
		&& ((messsageLenVecotr_expected_prev[16] !== last_messsageLenVecotr_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[16] = messsageLenVecotr_expected_prev[16];
	end
	if (
		( messsageLenVecotr_expected_prev[17] !== 1'bx ) && ( messsageLenVecotr_prev[17] !== messsageLenVecotr_expected_prev[17] )
		&& ((messsageLenVecotr_expected_prev[17] !== last_messsageLenVecotr_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[17] = messsageLenVecotr_expected_prev[17];
	end
	if (
		( messsageLenVecotr_expected_prev[18] !== 1'bx ) && ( messsageLenVecotr_prev[18] !== messsageLenVecotr_expected_prev[18] )
		&& ((messsageLenVecotr_expected_prev[18] !== last_messsageLenVecotr_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[18] = messsageLenVecotr_expected_prev[18];
	end
	if (
		( messsageLenVecotr_expected_prev[19] !== 1'bx ) && ( messsageLenVecotr_prev[19] !== messsageLenVecotr_expected_prev[19] )
		&& ((messsageLenVecotr_expected_prev[19] !== last_messsageLenVecotr_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[19] = messsageLenVecotr_expected_prev[19];
	end
	if (
		( messsageLenVecotr_expected_prev[20] !== 1'bx ) && ( messsageLenVecotr_prev[20] !== messsageLenVecotr_expected_prev[20] )
		&& ((messsageLenVecotr_expected_prev[20] !== last_messsageLenVecotr_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[20] = messsageLenVecotr_expected_prev[20];
	end
	if (
		( messsageLenVecotr_expected_prev[21] !== 1'bx ) && ( messsageLenVecotr_prev[21] !== messsageLenVecotr_expected_prev[21] )
		&& ((messsageLenVecotr_expected_prev[21] !== last_messsageLenVecotr_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[21] = messsageLenVecotr_expected_prev[21];
	end
	if (
		( messsageLenVecotr_expected_prev[22] !== 1'bx ) && ( messsageLenVecotr_prev[22] !== messsageLenVecotr_expected_prev[22] )
		&& ((messsageLenVecotr_expected_prev[22] !== last_messsageLenVecotr_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[22] = messsageLenVecotr_expected_prev[22];
	end
	if (
		( messsageLenVecotr_expected_prev[23] !== 1'bx ) && ( messsageLenVecotr_prev[23] !== messsageLenVecotr_expected_prev[23] )
		&& ((messsageLenVecotr_expected_prev[23] !== last_messsageLenVecotr_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[23] = messsageLenVecotr_expected_prev[23];
	end
	if (
		( messsageLenVecotr_expected_prev[24] !== 1'bx ) && ( messsageLenVecotr_prev[24] !== messsageLenVecotr_expected_prev[24] )
		&& ((messsageLenVecotr_expected_prev[24] !== last_messsageLenVecotr_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[24] = messsageLenVecotr_expected_prev[24];
	end
	if (
		( messsageLenVecotr_expected_prev[25] !== 1'bx ) && ( messsageLenVecotr_prev[25] !== messsageLenVecotr_expected_prev[25] )
		&& ((messsageLenVecotr_expected_prev[25] !== last_messsageLenVecotr_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[25] = messsageLenVecotr_expected_prev[25];
	end
	if (
		( messsageLenVecotr_expected_prev[26] !== 1'bx ) && ( messsageLenVecotr_prev[26] !== messsageLenVecotr_expected_prev[26] )
		&& ((messsageLenVecotr_expected_prev[26] !== last_messsageLenVecotr_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[26] = messsageLenVecotr_expected_prev[26];
	end
	if (
		( messsageLenVecotr_expected_prev[27] !== 1'bx ) && ( messsageLenVecotr_prev[27] !== messsageLenVecotr_expected_prev[27] )
		&& ((messsageLenVecotr_expected_prev[27] !== last_messsageLenVecotr_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[27] = messsageLenVecotr_expected_prev[27];
	end
	if (
		( messsageLenVecotr_expected_prev[28] !== 1'bx ) && ( messsageLenVecotr_prev[28] !== messsageLenVecotr_expected_prev[28] )
		&& ((messsageLenVecotr_expected_prev[28] !== last_messsageLenVecotr_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[28] = messsageLenVecotr_expected_prev[28];
	end
	if (
		( messsageLenVecotr_expected_prev[29] !== 1'bx ) && ( messsageLenVecotr_prev[29] !== messsageLenVecotr_expected_prev[29] )
		&& ((messsageLenVecotr_expected_prev[29] !== last_messsageLenVecotr_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[29] = messsageLenVecotr_expected_prev[29];
	end
	if (
		( messsageLenVecotr_expected_prev[30] !== 1'bx ) && ( messsageLenVecotr_prev[30] !== messsageLenVecotr_expected_prev[30] )
		&& ((messsageLenVecotr_expected_prev[30] !== last_messsageLenVecotr_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[30] = messsageLenVecotr_expected_prev[30];
	end
	if (
		( messsageLenVecotr_expected_prev[31] !== 1'bx ) && ( messsageLenVecotr_prev[31] !== messsageLenVecotr_expected_prev[31] )
		&& ((messsageLenVecotr_expected_prev[31] !== last_messsageLenVecotr_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[31] = messsageLenVecotr_expected_prev[31];
	end
	if (
		( messsageLenVecotr_expected_prev[32] !== 1'bx ) && ( messsageLenVecotr_prev[32] !== messsageLenVecotr_expected_prev[32] )
		&& ((messsageLenVecotr_expected_prev[32] !== last_messsageLenVecotr_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[32] = messsageLenVecotr_expected_prev[32];
	end
	if (
		( messsageLenVecotr_expected_prev[33] !== 1'bx ) && ( messsageLenVecotr_prev[33] !== messsageLenVecotr_expected_prev[33] )
		&& ((messsageLenVecotr_expected_prev[33] !== last_messsageLenVecotr_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[33] = messsageLenVecotr_expected_prev[33];
	end
	if (
		( messsageLenVecotr_expected_prev[34] !== 1'bx ) && ( messsageLenVecotr_prev[34] !== messsageLenVecotr_expected_prev[34] )
		&& ((messsageLenVecotr_expected_prev[34] !== last_messsageLenVecotr_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[34] = messsageLenVecotr_expected_prev[34];
	end
	if (
		( messsageLenVecotr_expected_prev[35] !== 1'bx ) && ( messsageLenVecotr_prev[35] !== messsageLenVecotr_expected_prev[35] )
		&& ((messsageLenVecotr_expected_prev[35] !== last_messsageLenVecotr_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[35] = messsageLenVecotr_expected_prev[35];
	end
	if (
		( messsageLenVecotr_expected_prev[36] !== 1'bx ) && ( messsageLenVecotr_prev[36] !== messsageLenVecotr_expected_prev[36] )
		&& ((messsageLenVecotr_expected_prev[36] !== last_messsageLenVecotr_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[36] = messsageLenVecotr_expected_prev[36];
	end
	if (
		( messsageLenVecotr_expected_prev[37] !== 1'bx ) && ( messsageLenVecotr_prev[37] !== messsageLenVecotr_expected_prev[37] )
		&& ((messsageLenVecotr_expected_prev[37] !== last_messsageLenVecotr_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[37] = messsageLenVecotr_expected_prev[37];
	end
	if (
		( messsageLenVecotr_expected_prev[38] !== 1'bx ) && ( messsageLenVecotr_prev[38] !== messsageLenVecotr_expected_prev[38] )
		&& ((messsageLenVecotr_expected_prev[38] !== last_messsageLenVecotr_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[38] = messsageLenVecotr_expected_prev[38];
	end
	if (
		( messsageLenVecotr_expected_prev[39] !== 1'bx ) && ( messsageLenVecotr_prev[39] !== messsageLenVecotr_expected_prev[39] )
		&& ((messsageLenVecotr_expected_prev[39] !== last_messsageLenVecotr_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[39] = messsageLenVecotr_expected_prev[39];
	end
	if (
		( messsageLenVecotr_expected_prev[40] !== 1'bx ) && ( messsageLenVecotr_prev[40] !== messsageLenVecotr_expected_prev[40] )
		&& ((messsageLenVecotr_expected_prev[40] !== last_messsageLenVecotr_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[40] = messsageLenVecotr_expected_prev[40];
	end
	if (
		( messsageLenVecotr_expected_prev[41] !== 1'bx ) && ( messsageLenVecotr_prev[41] !== messsageLenVecotr_expected_prev[41] )
		&& ((messsageLenVecotr_expected_prev[41] !== last_messsageLenVecotr_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[41] = messsageLenVecotr_expected_prev[41];
	end
	if (
		( messsageLenVecotr_expected_prev[42] !== 1'bx ) && ( messsageLenVecotr_prev[42] !== messsageLenVecotr_expected_prev[42] )
		&& ((messsageLenVecotr_expected_prev[42] !== last_messsageLenVecotr_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[42] = messsageLenVecotr_expected_prev[42];
	end
	if (
		( messsageLenVecotr_expected_prev[43] !== 1'bx ) && ( messsageLenVecotr_prev[43] !== messsageLenVecotr_expected_prev[43] )
		&& ((messsageLenVecotr_expected_prev[43] !== last_messsageLenVecotr_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[43] = messsageLenVecotr_expected_prev[43];
	end
	if (
		( messsageLenVecotr_expected_prev[44] !== 1'bx ) && ( messsageLenVecotr_prev[44] !== messsageLenVecotr_expected_prev[44] )
		&& ((messsageLenVecotr_expected_prev[44] !== last_messsageLenVecotr_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[44] = messsageLenVecotr_expected_prev[44];
	end
	if (
		( messsageLenVecotr_expected_prev[45] !== 1'bx ) && ( messsageLenVecotr_prev[45] !== messsageLenVecotr_expected_prev[45] )
		&& ((messsageLenVecotr_expected_prev[45] !== last_messsageLenVecotr_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[45] = messsageLenVecotr_expected_prev[45];
	end
	if (
		( messsageLenVecotr_expected_prev[46] !== 1'bx ) && ( messsageLenVecotr_prev[46] !== messsageLenVecotr_expected_prev[46] )
		&& ((messsageLenVecotr_expected_prev[46] !== last_messsageLenVecotr_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[46] = messsageLenVecotr_expected_prev[46];
	end
	if (
		( messsageLenVecotr_expected_prev[47] !== 1'bx ) && ( messsageLenVecotr_prev[47] !== messsageLenVecotr_expected_prev[47] )
		&& ((messsageLenVecotr_expected_prev[47] !== last_messsageLenVecotr_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[47] = messsageLenVecotr_expected_prev[47];
	end
	if (
		( messsageLenVecotr_expected_prev[48] !== 1'bx ) && ( messsageLenVecotr_prev[48] !== messsageLenVecotr_expected_prev[48] )
		&& ((messsageLenVecotr_expected_prev[48] !== last_messsageLenVecotr_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[48] = messsageLenVecotr_expected_prev[48];
	end
	if (
		( messsageLenVecotr_expected_prev[49] !== 1'bx ) && ( messsageLenVecotr_prev[49] !== messsageLenVecotr_expected_prev[49] )
		&& ((messsageLenVecotr_expected_prev[49] !== last_messsageLenVecotr_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[49] = messsageLenVecotr_expected_prev[49];
	end
	if (
		( messsageLenVecotr_expected_prev[50] !== 1'bx ) && ( messsageLenVecotr_prev[50] !== messsageLenVecotr_expected_prev[50] )
		&& ((messsageLenVecotr_expected_prev[50] !== last_messsageLenVecotr_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[50] = messsageLenVecotr_expected_prev[50];
	end
	if (
		( messsageLenVecotr_expected_prev[51] !== 1'bx ) && ( messsageLenVecotr_prev[51] !== messsageLenVecotr_expected_prev[51] )
		&& ((messsageLenVecotr_expected_prev[51] !== last_messsageLenVecotr_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[51] = messsageLenVecotr_expected_prev[51];
	end
	if (
		( messsageLenVecotr_expected_prev[52] !== 1'bx ) && ( messsageLenVecotr_prev[52] !== messsageLenVecotr_expected_prev[52] )
		&& ((messsageLenVecotr_expected_prev[52] !== last_messsageLenVecotr_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[52] = messsageLenVecotr_expected_prev[52];
	end
	if (
		( messsageLenVecotr_expected_prev[53] !== 1'bx ) && ( messsageLenVecotr_prev[53] !== messsageLenVecotr_expected_prev[53] )
		&& ((messsageLenVecotr_expected_prev[53] !== last_messsageLenVecotr_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[53] = messsageLenVecotr_expected_prev[53];
	end
	if (
		( messsageLenVecotr_expected_prev[54] !== 1'bx ) && ( messsageLenVecotr_prev[54] !== messsageLenVecotr_expected_prev[54] )
		&& ((messsageLenVecotr_expected_prev[54] !== last_messsageLenVecotr_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[54] = messsageLenVecotr_expected_prev[54];
	end
	if (
		( messsageLenVecotr_expected_prev[55] !== 1'bx ) && ( messsageLenVecotr_prev[55] !== messsageLenVecotr_expected_prev[55] )
		&& ((messsageLenVecotr_expected_prev[55] !== last_messsageLenVecotr_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[55] = messsageLenVecotr_expected_prev[55];
	end
	if (
		( messsageLenVecotr_expected_prev[56] !== 1'bx ) && ( messsageLenVecotr_prev[56] !== messsageLenVecotr_expected_prev[56] )
		&& ((messsageLenVecotr_expected_prev[56] !== last_messsageLenVecotr_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[56] = messsageLenVecotr_expected_prev[56];
	end
	if (
		( messsageLenVecotr_expected_prev[57] !== 1'bx ) && ( messsageLenVecotr_prev[57] !== messsageLenVecotr_expected_prev[57] )
		&& ((messsageLenVecotr_expected_prev[57] !== last_messsageLenVecotr_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[57] = messsageLenVecotr_expected_prev[57];
	end
	if (
		( messsageLenVecotr_expected_prev[58] !== 1'bx ) && ( messsageLenVecotr_prev[58] !== messsageLenVecotr_expected_prev[58] )
		&& ((messsageLenVecotr_expected_prev[58] !== last_messsageLenVecotr_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[58] = messsageLenVecotr_expected_prev[58];
	end
	if (
		( messsageLenVecotr_expected_prev[59] !== 1'bx ) && ( messsageLenVecotr_prev[59] !== messsageLenVecotr_expected_prev[59] )
		&& ((messsageLenVecotr_expected_prev[59] !== last_messsageLenVecotr_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[59] = messsageLenVecotr_expected_prev[59];
	end
	if (
		( messsageLenVecotr_expected_prev[60] !== 1'bx ) && ( messsageLenVecotr_prev[60] !== messsageLenVecotr_expected_prev[60] )
		&& ((messsageLenVecotr_expected_prev[60] !== last_messsageLenVecotr_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[60] = messsageLenVecotr_expected_prev[60];
	end
	if (
		( messsageLenVecotr_expected_prev[61] !== 1'bx ) && ( messsageLenVecotr_prev[61] !== messsageLenVecotr_expected_prev[61] )
		&& ((messsageLenVecotr_expected_prev[61] !== last_messsageLenVecotr_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[61] = messsageLenVecotr_expected_prev[61];
	end
	if (
		( messsageLenVecotr_expected_prev[62] !== 1'bx ) && ( messsageLenVecotr_prev[62] !== messsageLenVecotr_expected_prev[62] )
		&& ((messsageLenVecotr_expected_prev[62] !== last_messsageLenVecotr_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[62] = messsageLenVecotr_expected_prev[62];
	end
	if (
		( messsageLenVecotr_expected_prev[63] !== 1'bx ) && ( messsageLenVecotr_prev[63] !== messsageLenVecotr_expected_prev[63] )
		&& ((messsageLenVecotr_expected_prev[63] !== last_messsageLenVecotr_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port messsageLenVecotr[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", messsageLenVecotr_expected_prev);
		$display ("     Real value = %b", messsageLenVecotr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_messsageLenVecotr_exp[63] = messsageLenVecotr_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Preprocessor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ready;
reg reset;
// wires                                               
wire [0:63] messsageLenVecotr;

wire sampler;                             

// assign statements (if any)                          
Preprocessor i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.messsageLenVecotr(messsageLenVecotr),
	.ready(ready),
	.reset(reset)
);

// clk
initial
begin
	clk = 1'b0;
end 

// ready
initial
begin
	ready = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

Preprocessor_vlg_sample_tst tb_sample (
	.clk(clk),
	.ready(ready),
	.reset(reset),
	.sampler_tx(sampler)
);

Preprocessor_vlg_check_tst tb_out(
	.messsageLenVecotr(messsageLenVecotr),
	.sampler_rx(sampler)
);
endmodule

