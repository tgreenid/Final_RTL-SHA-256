// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2019 14:45:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Preprocessor1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Preprocessor1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ready;
reg readyBlock;
reg reset;
// wires                                               
wire lastBlock;
wire [0:511] messageBit;
wire [31:0] sub0;
wire [31:0] sub1;
wire [31:0] sub2;
wire [31:0] sub3;
wire [31:0] sub4;
wire [31:0] sub5;
wire [31:0] sub6;
wire [31:0] sub7;
wire [31:0] sub8;
wire [31:0] sub9;
wire [31:0] sub10;
wire [31:0] sub11;
wire [31:0] sub12;
wire [31:0] sub13;
wire [31:0] sub14;
wire [31:0] sub15;

// assign statements (if any)                          
Preprocessor1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.lastBlock(lastBlock),
	.messageBit(messageBit),
	.ready(ready),
	.readyBlock(readyBlock),
	.reset(reset),
	.sub0(sub0),
	.sub1(sub1),
	.sub2(sub2),
	.sub3(sub3),
	.sub4(sub4),
	.sub5(sub5),
	.sub6(sub6),
	.sub7(sub7),
	.sub8(sub8),
	.sub9(sub9),
	.sub10(sub10),
	.sub11(sub11),
	.sub12(sub12),
	.sub13(sub13),
	.sub14(sub14),
	.sub15(sub15)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// ready
initial
begin
	ready = 1'b1;
	ready = #860000 1'b0;
end 

// readyBlock
initial
begin
	readyBlock = 1'b0;
	readyBlock = #210000 1'b1;
	readyBlock = #270000 1'b0;
	readyBlock = #90000 1'b1;
	readyBlock = #290000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #870000 1'b1;
end 
endmodule

