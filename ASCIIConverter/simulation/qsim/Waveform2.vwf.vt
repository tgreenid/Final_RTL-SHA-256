// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/12/2019 00:20:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Preprocessor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Preprocessor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg messageString_1_7;
reg messageString_1_6;
reg messageString_1_5;
reg messageString_1_4;
reg messageString_1_3;
reg messageString_1_2;
reg messageString_1_1;
reg messageString_1_0;
reg messageString_2_7;
reg messageString_2_6;
reg messageString_2_5;
reg messageString_2_4;
reg messageString_2_3;
reg messageString_2_2;
reg messageString_2_1;
reg messageString_2_0;
reg ready;
reg reset;
// wires                                               
wire [0:63] a1;
wire [0:63] a2;
wire [31:0] k;
wire [0:63] messsageLenVecotr;

// assign statements (if any)                          
Preprocessor i1 (
// port map - connection between master ports and signals/registers   
	.a1(a1),
	.a2(a2),
	.clk(clk),
	.k(k),
	.messageString_1_7(messageString_1_7),
	.messageString_1_6(messageString_1_6),
	.messageString_1_5(messageString_1_5),
	.messageString_1_4(messageString_1_4),
	.messageString_1_3(messageString_1_3),
	.messageString_1_2(messageString_1_2),
	.messageString_1_1(messageString_1_1),
	.messageString_1_0(messageString_1_0),
	.messageString_2_7(messageString_2_7),
	.messageString_2_6(messageString_2_6),
	.messageString_2_5(messageString_2_5),
	.messageString_2_4(messageString_2_4),
	.messageString_2_3(messageString_2_3),
	.messageString_2_2(messageString_2_2),
	.messageString_2_1(messageString_2_1),
	.messageString_2_0(messageString_2_0),
	.messsageLenVecotr(messsageLenVecotr),
	.ready(ready),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// ready
initial
begin
	ready = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

