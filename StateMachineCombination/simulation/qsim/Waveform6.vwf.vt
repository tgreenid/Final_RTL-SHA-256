// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/14/2019 23:39:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CompressionFunction
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CompressionFunction_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
// wires                                               
wire [255:0] digest;
wire [0:63] k0_t;
wire [31:0] l;
wire lastBlock_t;
wire [0:63] len_unsigned_t;
wire [0:511] message_t;
wire [0:63] messageLength_t;
wire [31:0] nBlocks_t;
wire [31:0] outmem;
wire [0:511] output_t;
wire readyBlock_t;
wire ss_t_1_7;
wire ss_t_1_6;
wire ss_t_1_5;
wire ss_t_1_4;
wire ss_t_1_3;
wire ss_t_1_2;
wire ss_t_1_1;
wire ss_t_1_0;
wire ss_t_2_7;
wire ss_t_2_6;
wire ss_t_2_5;
wire ss_t_2_4;
wire ss_t_2_3;
wire ss_t_2_2;
wire ss_t_2_1;
wire ss_t_2_0;
wire ss_t_3_7;
wire ss_t_3_6;
wire ss_t_3_5;
wire ss_t_3_4;
wire ss_t_3_3;
wire ss_t_3_2;
wire ss_t_3_1;
wire ss_t_3_0;
wire [2:0] state;
wire [31:0] x_t;

// assign statements (if any)                          
CompressionFunction i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.digest(digest),
	.k0_t(k0_t),
	.l(l),
	.lastBlock_t(lastBlock_t),
	.len_unsigned_t(len_unsigned_t),
	.message_t(message_t),
	.messageLength_t(messageLength_t),
	.nBlocks_t(nBlocks_t),
	.outmem(outmem),
	.output_t(output_t),
	.readyBlock_t(readyBlock_t),
	.state(state),
	.x_t(x_t)
);
initial 
begin 
#15000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
endmodule

